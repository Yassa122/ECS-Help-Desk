{"ast":null,"code":"var _jsxFileName = \"D:\\\\ECS-Project\\\\frontendtest\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useCallback, useEffect, useState } from \"react\";\nimport { postRequest } from \"../utils/services\";\nimport { baseUrl } from \"../utils/services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [registerError, setRegisterError] = useState(null);\n  const [registerLoading, setRegisterLoading] = useState(false);\n  const [registerInfo, setRegisterInfo] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\"\n  });\n  const [loginError, setLoginError] = useState(null);\n  const [loginLoading, setLoginLoading] = useState(false);\n  const [loginInfo, setLoginInfo] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  useEffect(() => {\n    // Restore user and token from localStorage\n    const storedUserData = localStorage.getItem(\"User\");\n    const storedToken = localStorage.getItem(\"Token\");\n    // console.log(\"storedToken\", storedToken);\n    if (storedUserData && storedToken) {\n      const parsedUserData = JSON.parse(storedUserData);\n      setUser(parsedUserData); // Ensure this matches the structure of your user data\n    }\n  }, []);\n  const updateRegisterInfo = useCallback(info => {\n    setRegisterInfo(info);\n  }, []);\n  const updateLoginInfo = useCallback(info => {\n    setLoginInfo(info);\n  }, []);\n  const registerUser = useCallback(async e => {\n    e.preventDefault();\n    setRegisterLoading(true);\n    setRegisterError(null);\n    const response = await postRequest(`${baseUrl}/v1/register`, JSON.stringify(registerInfo));\n    setRegisterLoading(false);\n    if (response.error) {\n      setRegisterError(response);\n    } else {\n      localStorage.setItem(\"User\", JSON.stringify(response));\n      setUser(response.user);\n    }\n  }, [registerInfo]);\n  const loginUser = useCallback(async e => {\n    e.preventDefault();\n    setLoginLoading(true);\n    setLoginError(null);\n    try {\n      const response = await fetch(`${baseUrl}/v1/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(loginInfo)\n      });\n      const responseData = await response.json();\n      setLoginLoading(false);\n      if (response.ok) {\n        console.log(\"Login successful, storing user and token in localStorage\");\n        localStorage.setItem(\"User\", JSON.stringify(responseData.user));\n        localStorage.setItem(\"Token\", responseData.token);\n        setUser(responseData.user);\n      } else {\n        console.error(\"Login failed\");\n        setLoginError(\"Login failed\");\n      }\n    } catch (error) {\n      console.error(\"Error during login:\", error);\n      setLoginError(error.message || \"An error occurred during login\");\n    }\n  }, [loginInfo]);\n  const logoutUser = useCallback(() => {\n    console.log(\"Logging out, clearing user and token from localStorage\");\n    localStorage.removeItem(\"User\");\n    localStorage.removeItem(\"Token\");\n    setUser(null);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      registerInfo,\n      updateRegisterInfo,\n      registerUser,\n      registerError,\n      registerLoading,\n      logoutUser,\n      loginInfo,\n      updateLoginInfo,\n      loginError,\n      loginLoading,\n      loginUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"gBV/aNMbo6Bvebh30Q5kJRRooDQ=\");\n_c = AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useCallback","useEffect","useState","postRequest","baseUrl","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","children","_s","user","setUser","registerError","setRegisterError","registerLoading","setRegisterLoading","registerInfo","setRegisterInfo","name","email","password","loginError","setLoginError","loginLoading","setLoginLoading","loginInfo","setLoginInfo","storedUserData","localStorage","getItem","storedToken","parsedUserData","JSON","parse","updateRegisterInfo","info","updateLoginInfo","registerUser","e","preventDefault","response","stringify","error","setItem","loginUser","fetch","method","headers","body","responseData","json","ok","console","log","token","message","logoutUser","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ECS-Project/frontendtest/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useCallback, useEffect, useState } from \"react\";\r\nimport { postRequest } from \"../utils/services\";\r\nimport { baseUrl } from \"../utils/services\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthContextProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [registerError, setRegisterError] = useState(null);\r\n  const [registerLoading, setRegisterLoading] = useState(false);\r\n  const [registerInfo, setRegisterInfo] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [loginError, setLoginError] = useState(null);\r\n  const [loginLoading, setLoginLoading] = useState(false);\r\n  const [loginInfo, setLoginInfo] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Restore user and token from localStorage\r\n    const storedUserData = localStorage.getItem(\"User\");\r\n    const storedToken = localStorage.getItem(\"Token\");\r\n    // console.log(\"storedToken\", storedToken);\r\n    if (storedUserData && storedToken) {\r\n      const parsedUserData = JSON.parse(storedUserData);\r\n      setUser(parsedUserData); // Ensure this matches the structure of your user data\r\n    }\r\n  }, []);\r\n\r\n  const updateRegisterInfo = useCallback((info) => {\r\n    setRegisterInfo(info);\r\n  }, []);\r\n\r\n  const updateLoginInfo = useCallback((info) => {\r\n    setLoginInfo(info);\r\n  }, []);\r\n\r\n  const registerUser = useCallback(\r\n    async (e) => {\r\n      e.preventDefault();\r\n      setRegisterLoading(true);\r\n      setRegisterError(null);\r\n\r\n      const response = await postRequest(\r\n        `${baseUrl}/v1/register`,\r\n        JSON.stringify(registerInfo)\r\n      );\r\n\r\n      setRegisterLoading(false);\r\n\r\n      if (response.error) {\r\n        setRegisterError(response);\r\n      } else {\r\n        localStorage.setItem(\"User\", JSON.stringify(response));\r\n        setUser(response.user);\r\n      }\r\n    },\r\n    [registerInfo]\r\n  );\r\n\r\n  const loginUser = useCallback(\r\n    async (e) => {\r\n      e.preventDefault();\r\n      setLoginLoading(true);\r\n      setLoginError(null);\r\n\r\n      try {\r\n        const response = await fetch(`${baseUrl}/v1/login`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(loginInfo),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        setLoginLoading(false);\r\n\r\n        if (response.ok) {\r\n          console.log(\r\n            \"Login successful, storing user and token in localStorage\"\r\n          );\r\n          localStorage.setItem(\"User\", JSON.stringify(responseData.user));\r\n          localStorage.setItem(\"Token\", responseData.token);\r\n          setUser(responseData.user);\r\n        } else {\r\n          console.error(\"Login failed\");\r\n          setLoginError(\"Login failed\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error during login:\", error);\r\n        setLoginError(error.message || \"An error occurred during login\");\r\n      }\r\n    },\r\n    [loginInfo]\r\n  );\r\n\r\n  const logoutUser = useCallback(() => {\r\n    console.log(\"Logging out, clearing user and token from localStorage\");\r\n    localStorage.removeItem(\"User\");\r\n    localStorage.removeItem(\"Token\");\r\n    setUser(null);\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        registerInfo,\r\n        updateRegisterInfo,\r\n        registerUser,\r\n        registerError,\r\n        registerLoading,\r\n        logoutUser,\r\n        loginInfo,\r\n        updateLoginInfo,\r\n        loginError,\r\n        loginLoading,\r\n        loginUser,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}