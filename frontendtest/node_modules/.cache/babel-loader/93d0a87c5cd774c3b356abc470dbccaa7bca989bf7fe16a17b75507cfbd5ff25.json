{"ast":null,"code":"var _jsxFileName = \"D:\\\\ECS-Project\\\\frontendtest\\\\src\\\\pages\\\\securitySettings.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TwoFactorAuth = () => {\n  _s();\n  const [userEnteredToken, setUserEnteredToken] = useState(\"\");\n  const [enabled2FA, setEnabled2FA] = useState(false);\n  const [qrCodeURL, setQrCodeURL] = useState(\"\");\n  const enable2FA = async () => {\n    axios.post('http://localhost:3000/api/users/enable2fa', {}, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    try {\n      const response = await axios.post(\"http://localhost:3000/api/users/enable2fa\", {\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        // Use the qrCodeURL from the server response\n        setQrCodeURL(response.data.qrCodeURL);\n        setEnabled2FA(true);\n      } else {\n        console.error(\"Error enabling 2FA:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error enabling 2FA:\", error.statusText);\n    }\n  };\n  const testLoginWith2FA = async () => {\n    try {\n      const response = await axios.post(\"/api/verify-2fa\", {\n        token: userEnteredToken\n      }, {\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        console.log(\"Login successful with 2FA!\");\n      } else {\n        console.error(\"Login failed with 2FA:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error testing login with 2FA:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto mt-10 p-6 bg-gray-200 rounded-md shadow-md max-w-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"2FA Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), !enabled2FA ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button below to enable 2FA:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 text-white px-4 py-2 mt-4 rounded-md\",\n        onClick: enable2FA,\n        children: \"Enable 2FA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Scan the QR code with your 2FA app:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: qrCodeURL,\n        alt: \"2FA QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter the 2FA token to test login:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userEnteredToken,\n        onChange: e => setUserEnteredToken(e.target.value),\n        className: \"border border-gray-400 p-2 mt-2 rounded-md\",\n        placeholder: \"Enter 2FA Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-green-500 text-white px-4 py-2 mt-2 rounded-md\",\n        onClick: testLoginWith2FA,\n        children: \"Test Login with 2FA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(TwoFactorAuth, \"NY94EKv5JrivmRP8jbYH5G7S2rI=\");\n_c = TwoFactorAuth;\nexport default TwoFactorAuth;\nvar _c;\n$RefreshReg$(_c, \"TwoFactorAuth\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TwoFactorAuth","_s","userEnteredToken","setUserEnteredToken","enabled2FA","setEnabled2FA","qrCodeURL","setQrCodeURL","enable2FA","post","headers","localStorage","getItem","response","withCredentials","status","data","console","error","statusText","testLoginWith2FA","token","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["D:/ECS-Project/frontendtest/src/pages/securitySettings.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst TwoFactorAuth = () => {\r\n  const [userEnteredToken, setUserEnteredToken] = useState(\"\");\r\n  const [enabled2FA, setEnabled2FA] = useState(false);\r\n  const [qrCodeURL, setQrCodeURL] = useState(\"\");\r\n\r\n  const enable2FA = async () => {\r\n    axios.post('http://localhost:3000/api/users/enable2fa', {}, {\r\n  headers: {\r\n    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n  }\r\n});\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:3000/api/users/enable2fa\",\r\n        { withCredentials: true }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        // Use the qrCodeURL from the server response\r\n        setQrCodeURL(response.data.qrCodeURL);\r\n        setEnabled2FA(true);\r\n      } else {\r\n        console.error(\"Error enabling 2FA:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error enabling 2FA:\", error.statusText);\r\n    }\r\n  };\r\n\r\n  const testLoginWith2FA = async () => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"/api/verify-2fa\",\r\n        { token: userEnteredToken },\r\n        { withCredentials: true }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        console.log(\"Login successful with 2FA!\");\r\n      } else {\r\n        console.error(\"Login failed with 2FA:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error testing login with 2FA:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto mt-10 p-6 bg-gray-200 rounded-md shadow-md max-w-md\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">2FA Test</h1>\r\n\r\n      {!enabled2FA ? (\r\n        <>\r\n          <p>Click the button below to enable 2FA:</p>\r\n          <button\r\n            className=\"bg-blue-500 text-white px-4 py-2 mt-4 rounded-md\"\r\n            onClick={enable2FA}\r\n          >\r\n            Enable 2FA\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <p>Scan the QR code with your 2FA app:</p>\r\n          {/* Display the QR code image */}\r\n          <img src={qrCodeURL} alt=\"2FA QR Code\" />\r\n\r\n          <p>Enter the 2FA token to test login:</p>\r\n          <input\r\n            type=\"text\"\r\n            value={userEnteredToken}\r\n            onChange={(e) => setUserEnteredToken(e.target.value)}\r\n            className=\"border border-gray-400 p-2 mt-2 rounded-md\"\r\n            placeholder=\"Enter 2FA Token\"\r\n          />\r\n          <button\r\n            className=\"bg-green-500 text-white px-4 py-2 mt-2 rounded-md\"\r\n            onClick={testLoginWith2FA}\r\n          >\r\n            Test Login with 2FA\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TwoFactorAuth;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}