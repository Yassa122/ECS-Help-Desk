{"ast":null,"code":"var _jsxFileName = \"D:\\\\ECS-Project\\\\frontendtest\\\\src\\\\pages\\\\securitySettings.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { OTPAuthURL } from \"otplib\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TwoFactorAuth = () => {\n  _s();\n  const [userEnteredToken, setUserEnteredToken] = useState(\"\");\n  const [enabled2FA, setEnabled2FA] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [qrCodeUrl, setQrCodeUrl] = useState(null);\n  const enable2FA = async () => {\n    try {\n      // Simulate loading state\n      setLoading(true);\n\n      // Make a request to your backend to enable 2FA for the user\n      const response = await axios.post(\"http://your-api-endpoint/enable-2fa\", {\n        // Include any necessary data in the request body\n      });\n\n      // Handle the response accordingly\n      if (response.status === 200) {\n        // Extract the secret key from the response\n        const secretKey = response.data.secretKey;\n\n        // Generate the OTP Auth URL for the QR code\n        const otpAuthUrl = OTPAuthURL({\n          label: \"Your App\",\n          issuer: \"Your App\",\n          secret: secretKey\n        });\n\n        // Set the QR code URL\n        setQrCodeUrl(otpAuthUrl);\n\n        // Simulate successful enable 2FA\n        setEnabled2FA(true);\n      } else {\n        // Handle other response statuses or scenarios\n        setError(\"Error enabling 2FA. Please try again.\");\n      }\n    } catch (error) {\n      // Handle error\n      setError(\"Error enabling 2FA. Please try again.\");\n    } finally {\n      // Stop loading\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto mt-10 p-6 bg-gray-200 rounded-md shadow-md max-w-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"2FA Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), !enabled2FA ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button below to enable 2FA:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 text-white px-4 py-2 mt-4 rounded-md\",\n        onClick: enable2FA,\n        children: \"Enable 2FA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter the 2FA token to test login:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userEnteredToken,\n        onChange: e => setUserEnteredToken(e.target.value),\n        className: \"border border-gray-400 p-2 mt-2 rounded-md\",\n        placeholder: \"Enter 2FA Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-green-500 text-white px-4 py-2 mt-2 rounded-md\",\n        onClick: testLoginWith2FA,\n        children: \"Test Login with 2FA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(TwoFactorAuth, \"3ppZIobTazQkfbxQ4yW2VTmKumQ=\");\n_c = TwoFactorAuth;\nexport default TwoFactorAuth;\nvar _c;\n$RefreshReg$(_c, \"TwoFactorAuth\");","map":{"version":3,"names":["React","useState","OTPAuthURL","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TwoFactorAuth","_s","userEnteredToken","setUserEnteredToken","enabled2FA","setEnabled2FA","loading","setLoading","error","setError","qrCodeUrl","setQrCodeUrl","enable2FA","response","post","status","secretKey","data","otpAuthUrl","label","issuer","secret","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","testLoginWith2FA","_c","$RefreshReg$"],"sources":["D:/ECS-Project/frontendtest/src/pages/securitySettings.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { OTPAuthURL } from \"otplib\";\r\nimport axios from \"axios\";\r\n\r\nconst TwoFactorAuth = () => {\r\n    const [userEnteredToken, setUserEnteredToken] = useState(\"\");\r\n    const [enabled2FA, setEnabled2FA] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [qrCodeUrl, setQrCodeUrl] = useState(null);\r\n  \r\n    const enable2FA = async () => {\r\n      try {\r\n        // Simulate loading state\r\n        setLoading(true);\r\n  \r\n        // Make a request to your backend to enable 2FA for the user\r\n        const response = await axios.post(\"http://your-api-endpoint/enable-2fa\", {\r\n          // Include any necessary data in the request body\r\n        });\r\n  \r\n        // Handle the response accordingly\r\n        if (response.status === 200) {\r\n          // Extract the secret key from the response\r\n          const secretKey = response.data.secretKey;\r\n  \r\n          // Generate the OTP Auth URL for the QR code\r\n          const otpAuthUrl = OTPAuthURL({\r\n            label: \"Your App\",\r\n            issuer: \"Your App\",\r\n            secret: secretKey,\r\n          });\r\n  \r\n          // Set the QR code URL\r\n          setQrCodeUrl(otpAuthUrl);\r\n  \r\n          // Simulate successful enable 2FA\r\n          setEnabled2FA(true);\r\n        } else {\r\n          // Handle other response statuses or scenarios\r\n          setError(\"Error enabling 2FA. Please try again.\");\r\n        }\r\n      } catch (error) {\r\n        // Handle error\r\n        setError(\"Error enabling 2FA. Please try again.\");\r\n      } finally {\r\n        // Stop loading\r\n        setLoading(false);\r\n      }\r\n    };\r\n  return (\r\n    <div className=\"container mx-auto mt-10 p-6 bg-gray-200 rounded-md shadow-md max-w-md\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">2FA Test</h1>\r\n\r\n      {!enabled2FA ? (\r\n        <>\r\n          <p>Click the button below to enable 2FA:</p>\r\n          <button\r\n            className=\"bg-blue-500 text-white px-4 py-2 mt-4 rounded-md\"\r\n            onClick={enable2FA}\r\n          >\r\n            Enable 2FA\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <p>Enter the 2FA token to test login:</p>\r\n          <input\r\n            type=\"text\"\r\n            value={userEnteredToken}\r\n            onChange={(e) => setUserEnteredToken(e.target.value)}\r\n            className=\"border border-gray-400 p-2 mt-2 rounded-md\"\r\n            placeholder=\"Enter 2FA Token\"\r\n          />\r\n          <button\r\n            className=\"bg-green-500 text-white px-4 py-2 mt-2 rounded-md\"\r\n            onClick={testLoginWith2FA}\r\n          >\r\n            Test Login with 2FA\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TwoFactorAuth;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,QAAQ;AACnC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMmB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF;MACAL,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA,MAAMM,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,qCAAqC,EAAE;QACvE;MAAA,CACD,CAAC;;MAEF;MACA,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B;QACA,MAAMC,SAAS,GAAGH,QAAQ,CAACI,IAAI,CAACD,SAAS;;QAEzC;QACA,MAAME,UAAU,GAAGxB,UAAU,CAAC;UAC5ByB,KAAK,EAAE,UAAU;UACjBC,MAAM,EAAE,UAAU;UAClBC,MAAM,EAAEL;QACV,CAAC,CAAC;;QAEF;QACAL,YAAY,CAACO,UAAU,CAAC;;QAExB;QACAb,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,MAAM;QACL;QACAI,QAAQ,CAAC,uCAAuC,CAAC;MACnD;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACd;MACAC,QAAQ,CAAC,uCAAuC,CAAC;IACnD,CAAC,SAAS;MACR;MACAF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EACH,oBACEV,OAAA;IAAKyB,SAAS,EAAC,uEAAuE;IAAAC,QAAA,gBACpF1B,OAAA;MAAIyB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEpD,CAACvB,UAAU,gBACVP,OAAA,CAAAE,SAAA;MAAAwB,QAAA,gBACE1B,OAAA;QAAA0B,QAAA,EAAG;MAAqC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC5C9B,OAAA;QACEyB,SAAS,EAAC,kDAAkD;QAC5DM,OAAO,EAAEhB,SAAU;QAAAW,QAAA,EACpB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACT,CAAC,gBAEH9B,OAAA,CAAAE,SAAA;MAAAwB,QAAA,gBACE1B,OAAA;QAAA0B,QAAA,EAAG;MAAkC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACzC9B,OAAA;QACEgC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE5B,gBAAiB;QACxB6B,QAAQ,EAAGC,CAAC,IAAK7B,mBAAmB,CAAC6B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QACrDR,SAAS,EAAC,4CAA4C;QACtDY,WAAW,EAAC;MAAiB;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC,eACF9B,OAAA;QACEyB,SAAS,EAAC,mDAAmD;QAC7DM,OAAO,EAAEO,gBAAiB;QAAAZ,QAAA,EAC3B;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACT,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAhFID,aAAa;AAAAoC,EAAA,GAAbpC,aAAa;AAkFnB,eAAeA,aAAa;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}