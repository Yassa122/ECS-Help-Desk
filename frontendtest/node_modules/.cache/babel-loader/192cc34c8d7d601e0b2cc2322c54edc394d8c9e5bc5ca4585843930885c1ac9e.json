{"ast":null,"code":"export const baseUrl = \"http://localhost:3000/api\";\nexport const postRequest = async (url, body) => {\n  const token = localStorage.getItem(\"Token\");\n  const user = JSON.parse(localStorage.getItem(\"User\"));\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    let message;\n    if (data !== null && data !== void 0 && data.message) {\n      message = data.message;\n    } else {\n      message = data;\n    }\n    return {\n      error: true,\n      message\n    };\n  }\n  return data;\n};\nexport const getRequest = async url => {\n  const token = localStorage.getItem(\"Token\");\n  try {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      // Handle non-2xx status codes\n      const errorText = await response.text();\n      throw new Error(errorText || \"Failed to fetch data\");\n    }\n\n    // Check if the response has content\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(\"Invalid response format\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["baseUrl","postRequest","url","body","token","localStorage","getItem","user","JSON","parse","response","fetch","method","headers","Authorization","data","json","ok","message","error","getRequest","errorText","text","Error","contentType","get","includes","console"],"sources":["D:/ECS-Project/frontendtest/src/utils/services.js"],"sourcesContent":["export const baseUrl = \"http://localhost:3000/api\";\r\n\r\nexport const postRequest = async (url, body) => {\r\n    const token = localStorage.getItem(\"Token\");\r\n    const user = JSON.parse(localStorage.getItem(\"User\"));\r\n\r\n    const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${token}`, },\r\n        body,\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        let message;\r\n\r\n        if (data?.message) {\r\n            message = data.message;\r\n        } else {\r\n            message = data;\r\n        }\r\n        return { error: true, message };\r\n    }\r\n\r\n    return data;\r\n};\r\n\r\nexport const getRequest = async (url) => {\r\n    const token = localStorage.getItem(\"Token\");\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: \"GET\",\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            // Handle non-2xx status codes\r\n            const errorText = await response.text();\r\n            throw new Error(errorText || \"Failed to fetch data\");\r\n        }\r\n\r\n        // Check if the response has content\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if (!contentType || !contentType.includes(\"application/json\")) {\r\n            throw new Error(\"Invalid response format\");\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG,2BAA2B;AAElD,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,GAAG,EAAEC,IAAI,KAAK;EAC5C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EAErD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,EAAE;IAC9BU,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE,kBAAkB;MAAEC,aAAa,EAAG,UAASV,KAAM;IAAG,CAAC;IAClFD;EACJ,CAAC,CAAC;EAEF,MAAMY,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAElC,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;IACd,IAAIC,OAAO;IAEX,IAAIH,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEG,OAAO,EAAE;MACfA,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC1B,CAAC,MAAM;MACHA,OAAO,GAAGH,IAAI;IAClB;IACA,OAAO;MAAEI,KAAK,EAAE,IAAI;MAAED;IAAQ,CAAC;EACnC;EAEA,OAAOH,IAAI;AACf,CAAC;AAED,OAAO,MAAMK,UAAU,GAAG,MAAOlB,GAAG,IAAK;EACrC,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,EAAE;MAC9BU,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,aAAa,EAAG,UAASV,KAAM;MACnC;IACJ,CAAC,CAAC;IAEF,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;MACd;MACA,MAAMI,SAAS,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,IAAI,sBAAsB,CAAC;IACxD;;IAEA;IACA,MAAMG,WAAW,GAAGd,QAAQ,CAACG,OAAO,CAACY,GAAG,CAAC,cAAc,CAAC;IACxD,IAAI,CAACD,WAAW,IAAI,CAACA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3D,MAAM,IAAIH,KAAK,CAAC,yBAAyB,CAAC;IAC9C;IAEA,OAAO,MAAMb,QAAQ,CAACM,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZQ,OAAO,CAACR,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}