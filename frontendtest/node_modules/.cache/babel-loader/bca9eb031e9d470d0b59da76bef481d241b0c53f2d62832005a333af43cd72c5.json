{"ast":null,"code":"var _jsxFileName = \"D:\\\\ECS-Project\\\\frontendtest\\\\src\\\\pages\\\\securitySettings.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport QRCode from \"qrcode.react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TwoFactorAuth = () => {\n  _s();\n  const [userEnteredToken, setUserEnteredToken] = useState(\"\");\n  const [enabled2FA, setEnabled2FA] = useState(false);\n  const [secret, setSecret] = useState(\"\");\n  const enable2FA = async () => {\n    try {\n      // Simulate loading state\n      // Make a request to your backend to enable 2FA for the user\n      // Update the state accordingly\n      // ...\n\n      // Simulate successful enable 2FA\n      const simulatedSecret = \"YourSimulatedSecret\"; // Replace with the actual secret from your backend\n      setSecret(simulatedSecret);\n      setEnabled2FA(true);\n    } catch (error) {\n      // Handle error\n      console.error(\"Error enabling 2FA:\", error);\n    }\n  };\n  const testLoginWith2FA = async () => {\n    // Simulate testing login with 2FA\n    // Make a request to your backend to verify the entered token\n    // Handle the response accordingly\n    console.log(\"Testing login with 2FA...\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto mt-10 p-6 bg-gray-200 rounded-md shadow-md max-w-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"2FA Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), !enabled2FA ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button below to enable 2FA:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 text-white px-4 py-2 mt-4 rounded-md\",\n        onClick: enable2FA,\n        children: \"Enable 2FA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Scan the QR code with your 2FA app:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QRCode, {\n        value: `otpauth://totp/YourApp:${encodeURIComponent(secret)}?issuer=YourApp`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter the 2FA token to test login:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userEnteredToken,\n        onChange: e => setUserEnteredToken(e.target.value),\n        className: \"border border-gray-400 p-2 mt-2 rounded-md\",\n        placeholder: \"Enter 2FA Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-green-500 text-white px-4 py-2 mt-2 rounded-md\",\n        onClick: testLoginWith2FA,\n        children: \"Test Login with 2FA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(TwoFactorAuth, \"+GXsUl0dpU6hkLTc7MCJhn4kq0E=\");\n_c = TwoFactorAuth;\nexport default TwoFactorAuth;\na;\nvar _c;\n$RefreshReg$(_c, \"TwoFactorAuth\");","map":{"version":3,"names":["React","useState","QRCode","jsxDEV","_jsxDEV","Fragment","_Fragment","TwoFactorAuth","_s","userEnteredToken","setUserEnteredToken","enabled2FA","setEnabled2FA","secret","setSecret","enable2FA","simulatedSecret","error","console","testLoginWith2FA","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","encodeURIComponent","type","onChange","e","target","placeholder","_c","a","$RefreshReg$"],"sources":["D:/ECS-Project/frontendtest/src/pages/securitySettings.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport QRCode from \"qrcode.react\";\r\n\r\nconst TwoFactorAuth = () => {\r\n  const [userEnteredToken, setUserEnteredToken] = useState(\"\");\r\n  const [enabled2FA, setEnabled2FA] = useState(false);\r\n  const [secret, setSecret] = useState(\"\");\r\n\r\n  const enable2FA = async () => {\r\n    try {\r\n      // Simulate loading state\r\n      // Make a request to your backend to enable 2FA for the user\r\n      // Update the state accordingly\r\n      // ...\r\n\r\n      // Simulate successful enable 2FA\r\n      const simulatedSecret = \"YourSimulatedSecret\"; // Replace with the actual secret from your backend\r\n      setSecret(simulatedSecret);\r\n      setEnabled2FA(true);\r\n    } catch (error) {\r\n      // Handle error\r\n      console.error(\"Error enabling 2FA:\", error);\r\n    }\r\n  };\r\n\r\n  const testLoginWith2FA = async () => {\r\n    // Simulate testing login with 2FA\r\n    // Make a request to your backend to verify the entered token\r\n    // Handle the response accordingly\r\n    console.log(\"Testing login with 2FA...\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto mt-10 p-6 bg-gray-200 rounded-md shadow-md max-w-md\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">2FA Test</h1>\r\n\r\n      {!enabled2FA ? (\r\n        <>\r\n          <p>Click the button below to enable 2FA:</p>\r\n          <button\r\n            className=\"bg-blue-500 text-white px-4 py-2 mt-4 rounded-md\"\r\n            onClick={enable2FA}\r\n          >\r\n            Enable 2FA\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <p>Scan the QR code with your 2FA app:</p>\r\n          <QRCode value={`otpauth://totp/YourApp:${encodeURIComponent(secret)}?issuer=YourApp`} />\r\n\r\n          <p>Enter the 2FA token to test login:</p>\r\n          <input\r\n            type=\"text\"\r\n            value={userEnteredToken}\r\n            onChange={(e) => setUserEnteredToken(e.target.value)}\r\n            className=\"border border-gray-400 p-2 mt-2 rounded-md\"\r\n            placeholder=\"Enter 2FA Token\"\r\n          />\r\n          <button\r\n            className=\"bg-green-500 text-white px-4 py-2 mt-2 rounded-md\"\r\n            onClick={testLoginWith2FA}\r\n          >\r\n            Test Login with 2FA\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TwoFactorAuth;\r\na"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}