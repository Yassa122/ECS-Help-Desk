{"ast":null,"code":"var _jsxFileName = \"D:\\\\ECS-Project\\\\frontendtest\\\\src\\\\context\\\\ChatContext.jsx\",\n  _s = $RefreshSig$();\n// ChatContext.jsx\n\nimport { createContext, useState, useEffect, useCallback } from \"react\";\nimport { baseUrl, getRequest, postRequest } from \"../utils/services\";\nimport { set } from \"mongoose\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatContextProvider = ({\n  children,\n  user\n}) => {\n  _s();\n  const [userChats, setUserChats] = useState([]);\n  const [isUserChatsLoading, setIsUserChatsLoading] = useState(false);\n  const [userChatError, setUserChatError] = useState(null);\n  const [potentialChats, setPotentialChats] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isMessagesLoading, setIsMessagesLoading] = useState(false);\n  const [messagesError, setMessagesError] = useState(null);\n  const [sendTextMessageError, setSendTextMessageError] = useState(null);\n  const [newMessage, setNewMessage] = useState(null);\n  useEffect(() => {\n    const getUsers = async () => {\n      try {\n        // Check if user exists and has _id property\n        if (!user || !user._id) {\n          console.error(\"User is null or does not have an _id property\");\n          return;\n        }\n        const response = await getRequest(`${baseUrl}/support-agents`);\n        console.log(\"Users response:\", response);\n        if (response.error) {\n          console.error(\"Error getting users:\", response.error);\n          return;\n        }\n        const pChats = response.filter(u => {\n          let isChatCreated = false;\n\n          // Check if userChats is defined and has length\n          if (userChats && userChats.length > 0) {\n            isChatCreated = userChats.some(chat => {\n              // Check if chat.members is defined before accessing its elements\n              return chat.members && (chat.members[0] === u._id || chat.members[1] === u._id);\n            });\n          }\n          return !isChatCreated;\n        });\n        console.log(\"Potential Chats:\", pChats);\n        setPotentialChats(pChats);\n      } catch (error) {\n        console.error(\"Error getting users:\", error);\n      }\n    };\n    getUsers();\n  }, [user, userChats]);\n  useEffect(() => {\n    const getUserChats = async () => {\n      if (user && user._id) {\n        setIsUserChatsLoading(true);\n        setUserChatError(null);\n        try {\n          const response = await getRequest(`${baseUrl}/chat/${user._id}`);\n          console.log(\"User Chats response:\", response);\n          if (response.error) {\n            setUserChatError(response.error);\n          } else {\n            setUserChats(response.chats || []);\n          }\n        } catch (error) {\n          console.error(\"Error during fetching user chats:\", error);\n          setUserChatError(error.message || \"An error occurred while fetching chats\");\n        } finally {\n          setIsUserChatsLoading(false);\n        }\n      }\n    };\n\n    // Call getUserChats\n    getUserChats();\n\n    // Check if there's a new message and update messages state\n    if (newMessage && newMessage.chatId) {\n      // Fetch the latest messages for the current chat\n      const updatedMessages = getRequest(`${baseUrl}/message/${newMessage.chatId}`);\n\n      // Update the messages state with the latest messages\n      setMessages(updatedMessages.messages || []);\n    }\n  }, [user, newMessage]);\n  useEffect(() => {\n    const getMessages = async () => {\n      setIsMessagesLoading(true);\n      setMessagesError(null);\n      try {\n        if (!currentChat) {\n          // If there is no current chat, set messages to an empty array\n          setMessages([]);\n          return;\n        }\n        const response = await getRequest(`${baseUrl}/message/${currentChat._id}`);\n        setIsMessagesLoading(false);\n        if (response.error) {\n          setMessagesError(response);\n        } else {\n          setMessages(response.messages || []);\n        }\n      } catch (error) {\n        setIsMessagesLoading(false);\n        setMessagesError(\"An error occurred while fetching messages\");\n      }\n    };\n    getMessages();\n  }, [currentChat]);\n  const sendTextMessage = useCallback(async (textMessage, sender, currentChatId, setTextMessage) => {\n    try {\n      if (!textMessage) {\n        return console.log(\"You must type something...\");\n      }\n      const response = await postRequest(`${baseUrl}/message`, JSON.stringify({\n        text: textMessage,\n        senderId: sender,\n        chatId: currentChatId\n      }));\n      if (response.error) {\n        setSendTextMessageError(response);\n      }\n      setNewMessage(response);\n\n      // Update messages by fetching the latest messages after sending a new message\n      const updatedMessages = await getRequest(`${baseUrl}/message/${currentChatId}`);\n      setMessages(updatedMessages.messages || []);\n      setTextMessage(\"\");\n    } catch (error) {\n      console.error(\"Error sending text message:\", error);\n    }\n  }, []);\n  const updateCurrentChat = useCallback(chat => {\n    setCurrentChat(chat);\n  }, []);\n  const createChat = useCallback(async (firstId, secondId) => {\n    try {\n      const response = await postRequest(`${baseUrl}/chat`, JSON.stringify({\n        firstId,\n        secondId\n      }));\n      console.log(\"Create Chat response:\", response);\n      if (response.error) {\n        return console.error(\"Error creating chat:\", response);\n      }\n      setUserChats(prev => [...prev, response]);\n\n      // Reload the page\n      window.location.reload();\n    } catch (error) {\n      console.error(\"Error creating chat:\", error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      userChats,\n      isUserChatsLoading,\n      userChatError,\n      potentialChats,\n      createChat,\n      updateCurrentChat,\n      messages,\n      isMessagesLoading,\n      messagesError,\n      currentChat,\n      sendTextMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContextProvider, \"JItR1dOScQ2v5i02CZj+ZmNNP4Y=\");\n_c = ChatContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatContextProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","baseUrl","getRequest","postRequest","set","jsxDEV","_jsxDEV","ChatContext","ChatContextProvider","children","user","_s","userChats","setUserChats","isUserChatsLoading","setIsUserChatsLoading","userChatError","setUserChatError","potentialChats","setPotentialChats","currentChat","setCurrentChat","messages","setMessages","isMessagesLoading","setIsMessagesLoading","messagesError","setMessagesError","sendTextMessageError","setSendTextMessageError","newMessage","setNewMessage","getUsers","_id","console","error","response","log","pChats","filter","u","isChatCreated","length","some","chat","members","getUserChats","chats","message","chatId","updatedMessages","getMessages","sendTextMessage","textMessage","sender","currentChatId","setTextMessage","JSON","stringify","text","senderId","updateCurrentChat","createChat","firstId","secondId","prev","window","location","reload","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ECS-Project/frontendtest/src/context/ChatContext.jsx"],"sourcesContent":["// ChatContext.jsx\r\n\r\nimport { createContext, useState, useEffect, useCallback } from \"react\";\r\nimport { baseUrl, getRequest, postRequest } from \"../utils/services\";\r\nimport { set } from \"mongoose\";\r\n\r\nexport const ChatContext = createContext();\r\n\r\nexport const ChatContextProvider = ({ children, user }) => {\r\n  const [userChats, setUserChats] = useState([]);\r\n  const [isUserChatsLoading, setIsUserChatsLoading] = useState(false);\r\n  const [userChatError, setUserChatError] = useState(null);\r\n  const [potentialChats, setPotentialChats] = useState([]);\r\n  const [currentChat, setCurrentChat] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [isMessagesLoading, setIsMessagesLoading] = useState(false);\r\n  const [messagesError, setMessagesError] = useState(null);\r\n  const [sendTextMessageError, setSendTextMessageError] = useState(null);\r\n  const [newMessage, setNewMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getUsers = async () => {\r\n      try {\r\n        // Check if user exists and has _id property\r\n        if (!user || !user._id) {\r\n          console.error(\"User is null or does not have an _id property\");\r\n          return;\r\n        }\r\n\r\n        const response = await getRequest(`${baseUrl}/support-agents`);\r\n        console.log(\"Users response:\", response);\r\n\r\n        if (response.error) {\r\n          console.error(\"Error getting users:\", response.error);\r\n          return;\r\n        }\r\n\r\n        const pChats = response.filter((u) => {\r\n          let isChatCreated = false;\r\n\r\n          // Check if userChats is defined and has length\r\n          if (userChats && userChats.length > 0) {\r\n            isChatCreated = userChats.some((chat) => {\r\n              // Check if chat.members is defined before accessing its elements\r\n              return (\r\n                chat.members &&\r\n                (chat.members[0] === u._id || chat.members[1] === u._id)\r\n              );\r\n            });\r\n          }\r\n\r\n          return !isChatCreated;\r\n        });\r\n\r\n        console.log(\"Potential Chats:\", pChats);\r\n        setPotentialChats(pChats);\r\n      } catch (error) {\r\n        console.error(\"Error getting users:\", error);\r\n      }\r\n    };\r\n\r\n    getUsers();\r\n  }, [user, userChats]);\r\n\r\n  useEffect(() => {\r\n    const getUserChats = async () => {\r\n      if (user && user._id) {\r\n        setIsUserChatsLoading(true);\r\n        setUserChatError(null);\r\n\r\n        try {\r\n          const response = await getRequest(`${baseUrl}/chat/${user._id}`);\r\n          console.log(\"User Chats response:\", response);\r\n\r\n          if (response.error) {\r\n            setUserChatError(response.error);\r\n          } else {\r\n            setUserChats(response.chats || []);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error during fetching user chats:\", error);\r\n          setUserChatError(\r\n            error.message || \"An error occurred while fetching chats\"\r\n          );\r\n        } finally {\r\n          setIsUserChatsLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Call getUserChats\r\n    getUserChats();\r\n\r\n    // Check if there's a new message and update messages state\r\n    if (newMessage && newMessage.chatId) {\r\n      // Fetch the latest messages for the current chat\r\n      const updatedMessages = getRequest(\r\n        `${baseUrl}/message/${newMessage.chatId}`\r\n      );\r\n\r\n      // Update the messages state with the latest messages\r\n      setMessages(updatedMessages.messages || []);\r\n    }\r\n  }, [user, newMessage]);\r\n\r\n  useEffect(() => {\r\n    const getMessages = async () => {\r\n      setIsMessagesLoading(true);\r\n      setMessagesError(null);\r\n\r\n      try {\r\n        if (!currentChat) {\r\n          // If there is no current chat, set messages to an empty array\r\n          setMessages([]);\r\n          return;\r\n        }\r\n\r\n        const response = await getRequest(\r\n          `${baseUrl}/message/${currentChat._id}`\r\n        );\r\n        setIsMessagesLoading(false);\r\n\r\n        if (response.error) {\r\n          setMessagesError(response);\r\n        } else {\r\n          setMessages(response.messages || []);\r\n        }\r\n      } catch (error) {\r\n        setIsMessagesLoading(false);\r\n        setMessagesError(\"An error occurred while fetching messages\");\r\n      }\r\n    };\r\n\r\n    getMessages();\r\n  }, [currentChat]);\r\n\r\n  const sendTextMessage = useCallback(\r\n    async (textMessage, sender, currentChatId, setTextMessage) => {\r\n      try {\r\n        if (!textMessage) {\r\n          return console.log(\"You must type something...\");\r\n        }\r\n\r\n        const response = await postRequest(\r\n          `${baseUrl}/message`,\r\n          JSON.stringify({\r\n            text: textMessage,\r\n            senderId: sender,\r\n            chatId: currentChatId,\r\n          })\r\n        );\r\n\r\n        if (response.error) {\r\n          setSendTextMessageError(response);\r\n        }\r\n\r\n        setNewMessage(response);\r\n\r\n        // Update messages by fetching the latest messages after sending a new message\r\n        const updatedMessages = await getRequest(\r\n          `${baseUrl}/message/${currentChatId}`\r\n        );\r\n\r\n        setMessages(updatedMessages.messages || []);\r\n\r\n        setTextMessage(\"\");\r\n      } catch (error) {\r\n        console.error(\"Error sending text message:\", error);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const updateCurrentChat = useCallback((chat) => {\r\n    setCurrentChat(chat);\r\n  }, []);\r\n\r\n  const createChat = useCallback(async (firstId, secondId) => {\r\n    try {\r\n      const response = await postRequest(\r\n        `${baseUrl}/chat`,\r\n        JSON.stringify({ firstId, secondId })\r\n      );\r\n\r\n      console.log(\"Create Chat response:\", response);\r\n\r\n      if (response.error) {\r\n        return console.error(\"Error creating chat:\", response);\r\n      }\r\n\r\n      setUserChats((prev) => [...prev, response]);\r\n\r\n      // Reload the page\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.error(\"Error creating chat:\", error);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        userChats,\r\n        isUserChatsLoading,\r\n        userChatError,\r\n        potentialChats,\r\n        createChat,\r\n        updateCurrentChat,\r\n        messages,\r\n        isMessagesLoading,\r\n        messagesError,\r\n        currentChat,\r\n        sendTextMessage,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;;AAEA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACvE,SAASC,OAAO,EAAEC,UAAU,EAAEC,WAAW,QAAQ,mBAAmB;AACpE,SAASC,GAAG,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,OAAO,MAAMC,WAAW,gBAAGV,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMW,mBAAmB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoB,cAAc,EAAEC,iBAAiB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC0B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAAC4B,aAAa,EAAEC,gBAAgB,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC8B,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EACtE,MAAM,CAACgC,UAAU,EAAEC,aAAa,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMiC,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF;QACA,IAAI,CAACtB,IAAI,IAAI,CAACA,IAAI,CAACuB,GAAG,EAAE;UACtBC,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAC;UAC9D;QACF;QAEA,MAAMC,QAAQ,GAAG,MAAMlC,UAAU,CAAE,GAAED,OAAQ,iBAAgB,CAAC;QAC9DiC,OAAO,CAACG,GAAG,CAAC,iBAAiB,EAAED,QAAQ,CAAC;QAExC,IAAIA,QAAQ,CAACD,KAAK,EAAE;UAClBD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEC,QAAQ,CAACD,KAAK,CAAC;UACrD;QACF;QAEA,MAAMG,MAAM,GAAGF,QAAQ,CAACG,MAAM,CAAEC,CAAC,IAAK;UACpC,IAAIC,aAAa,GAAG,KAAK;;UAEzB;UACA,IAAI7B,SAAS,IAAIA,SAAS,CAAC8B,MAAM,GAAG,CAAC,EAAE;YACrCD,aAAa,GAAG7B,SAAS,CAAC+B,IAAI,CAAEC,IAAI,IAAK;cACvC;cACA,OACEA,IAAI,CAACC,OAAO,KACXD,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,KAAKL,CAAC,CAACP,GAAG,IAAIW,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,KAAKL,CAAC,CAACP,GAAG,CAAC;YAE5D,CAAC,CAAC;UACJ;UAEA,OAAO,CAACQ,aAAa;QACvB,CAAC,CAAC;QAEFP,OAAO,CAACG,GAAG,CAAC,kBAAkB,EAAEC,MAAM,CAAC;QACvCnB,iBAAiB,CAACmB,MAAM,CAAC;MAC3B,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDH,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACtB,IAAI,EAAEE,SAAS,CAAC,CAAC;EAErBb,SAAS,CAAC,MAAM;IACd,MAAM+C,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAIpC,IAAI,IAAIA,IAAI,CAACuB,GAAG,EAAE;QACpBlB,qBAAqB,CAAC,IAAI,CAAC;QAC3BE,gBAAgB,CAAC,IAAI,CAAC;QAEtB,IAAI;UACF,MAAMmB,QAAQ,GAAG,MAAMlC,UAAU,CAAE,GAAED,OAAQ,SAAQS,IAAI,CAACuB,GAAI,EAAC,CAAC;UAChEC,OAAO,CAACG,GAAG,CAAC,sBAAsB,EAAED,QAAQ,CAAC;UAE7C,IAAIA,QAAQ,CAACD,KAAK,EAAE;YAClBlB,gBAAgB,CAACmB,QAAQ,CAACD,KAAK,CAAC;UAClC,CAAC,MAAM;YACLtB,YAAY,CAACuB,QAAQ,CAACW,KAAK,IAAI,EAAE,CAAC;UACpC;QACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;UACdD,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;UACzDlB,gBAAgB,CACdkB,KAAK,CAACa,OAAO,IAAI,wCACnB,CAAC;QACH,CAAC,SAAS;UACRjC,qBAAqB,CAAC,KAAK,CAAC;QAC9B;MACF;IACF,CAAC;;IAED;IACA+B,YAAY,CAAC,CAAC;;IAEd;IACA,IAAIhB,UAAU,IAAIA,UAAU,CAACmB,MAAM,EAAE;MACnC;MACA,MAAMC,eAAe,GAAGhD,UAAU,CAC/B,GAAED,OAAQ,YAAW6B,UAAU,CAACmB,MAAO,EAC1C,CAAC;;MAED;MACA1B,WAAW,CAAC2B,eAAe,CAAC5B,QAAQ,IAAI,EAAE,CAAC;IAC7C;EACF,CAAC,EAAE,CAACZ,IAAI,EAAEoB,UAAU,CAAC,CAAC;EAEtB/B,SAAS,CAAC,MAAM;IACd,MAAMoD,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B1B,oBAAoB,CAAC,IAAI,CAAC;MAC1BE,gBAAgB,CAAC,IAAI,CAAC;MAEtB,IAAI;QACF,IAAI,CAACP,WAAW,EAAE;UAChB;UACAG,WAAW,CAAC,EAAE,CAAC;UACf;QACF;QAEA,MAAMa,QAAQ,GAAG,MAAMlC,UAAU,CAC9B,GAAED,OAAQ,YAAWmB,WAAW,CAACa,GAAI,EACxC,CAAC;QACDR,oBAAoB,CAAC,KAAK,CAAC;QAE3B,IAAIW,QAAQ,CAACD,KAAK,EAAE;UAClBR,gBAAgB,CAACS,QAAQ,CAAC;QAC5B,CAAC,MAAM;UACLb,WAAW,CAACa,QAAQ,CAACd,QAAQ,IAAI,EAAE,CAAC;QACtC;MACF,CAAC,CAAC,OAAOa,KAAK,EAAE;QACdV,oBAAoB,CAAC,KAAK,CAAC;QAC3BE,gBAAgB,CAAC,2CAA2C,CAAC;MAC/D;IACF,CAAC;IAEDwB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAAC/B,WAAW,CAAC,CAAC;EAEjB,MAAMgC,eAAe,GAAGpD,WAAW,CACjC,OAAOqD,WAAW,EAAEC,MAAM,EAAEC,aAAa,EAAEC,cAAc,KAAK;IAC5D,IAAI;MACF,IAAI,CAACH,WAAW,EAAE;QAChB,OAAOnB,OAAO,CAACG,GAAG,CAAC,4BAA4B,CAAC;MAClD;MAEA,MAAMD,QAAQ,GAAG,MAAMjC,WAAW,CAC/B,GAAEF,OAAQ,UAAS,EACpBwD,IAAI,CAACC,SAAS,CAAC;QACbC,IAAI,EAAEN,WAAW;QACjBO,QAAQ,EAAEN,MAAM;QAChBL,MAAM,EAAEM;MACV,CAAC,CACH,CAAC;MAED,IAAInB,QAAQ,CAACD,KAAK,EAAE;QAClBN,uBAAuB,CAACO,QAAQ,CAAC;MACnC;MAEAL,aAAa,CAACK,QAAQ,CAAC;;MAEvB;MACA,MAAMc,eAAe,GAAG,MAAMhD,UAAU,CACrC,GAAED,OAAQ,YAAWsD,aAAc,EACtC,CAAC;MAEDhC,WAAW,CAAC2B,eAAe,CAAC5B,QAAQ,IAAI,EAAE,CAAC;MAE3CkC,cAAc,CAAC,EAAE,CAAC;IACpB,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC,EACD,EACF,CAAC;EAED,MAAM0B,iBAAiB,GAAG7D,WAAW,CAAE4C,IAAI,IAAK;IAC9CvB,cAAc,CAACuB,IAAI,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,UAAU,GAAG9D,WAAW,CAAC,OAAO+D,OAAO,EAAEC,QAAQ,KAAK;IAC1D,IAAI;MACF,MAAM5B,QAAQ,GAAG,MAAMjC,WAAW,CAC/B,GAAEF,OAAQ,OAAM,EACjBwD,IAAI,CAACC,SAAS,CAAC;QAAEK,OAAO;QAAEC;MAAS,CAAC,CACtC,CAAC;MAED9B,OAAO,CAACG,GAAG,CAAC,uBAAuB,EAAED,QAAQ,CAAC;MAE9C,IAAIA,QAAQ,CAACD,KAAK,EAAE;QAClB,OAAOD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEC,QAAQ,CAAC;MACxD;MAEAvB,YAAY,CAAEoD,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE7B,QAAQ,CAAC,CAAC;;MAE3C;MACA8B,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOjC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE7B,OAAA,CAACC,WAAW,CAAC8D,QAAQ;IACnBC,KAAK,EAAE;MACL1D,SAAS;MACTE,kBAAkB;MAClBE,aAAa;MACbE,cAAc;MACd4C,UAAU;MACVD,iBAAiB;MACjBvC,QAAQ;MACRE,iBAAiB;MACjBE,aAAa;MACbN,WAAW;MACXgC;IACF,CAAE;IAAA3C,QAAA,EAEDA;EAAQ;IAAA8D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/D,EAAA,CAlNWH,mBAAmB;AAAAmE,EAAA,GAAnBnE,mBAAmB;AAAA,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}